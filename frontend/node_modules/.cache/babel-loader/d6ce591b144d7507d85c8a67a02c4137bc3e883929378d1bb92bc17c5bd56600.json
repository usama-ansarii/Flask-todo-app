{"ast":null,"code":"import axios from \"axios\";\nimport { basePath } from '../contants';\nexport const apiServices = axios.create({\n  baseURL: basePath,\n  timeout: 35000,\n  withCredentials: true\n});\napiServices.interceptors.request.use(async config => {\n  let token = await localStorage.getItem(\"token\");\n\n  // Check if the request body is FormData\n\n  config.headers = {\n    Accept: \"application/json, text/plain, */*\",\n    Authorization: token ? `Bearer ${token}` : \"\",\n    \"Content-Type\": \"application/json\"\n  };\n  return config;\n}, error => {\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","basePath","apiServices","create","baseURL","timeout","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Accept","Authorization","error","Promise","reject"],"sources":["/home/hp/Public/todo/frontend/src/services/ApiServices.js"],"sourcesContent":["import axios from \"axios\"\nimport {basePath} from '../contants'\nexport const apiServices = axios.create({\n    baseURL: basePath,\n    timeout:35000,\n    withCredentials: true\n})\n\n\n\napiServices.interceptors.request.use(async (config) => {\n  let token = await localStorage.getItem(\"token\");\n\n\n  // Check if the request body is FormData\n\n  \n  config.headers = {\n    Accept: \"application/json, text/plain, */*\",\n    Authorization: token ? `Bearer ${token}` : \"\",\n    \"Content-Type\": \"application/json\",\n  };\n  return config;\n},\n(error)=>{\n    return Promise.reject(error);\n}\n\n);"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,aAAa;AACpC,OAAO,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAM,CAAC;EACpCC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAC,KAAK;EACbC,eAAe,EAAE;AACrB,CAAC,CAAC;AAIFJ,WAAW,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACrD,IAAIC,KAAK,GAAG,MAAMC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAG/C;;EAGAH,MAAM,CAACI,OAAO,GAAG;IACfC,MAAM,EAAE,mCAAmC;IAC3CC,aAAa,EAAEL,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,EAAE;IAC7C,cAAc,EAAE;EAClB,CAAC;EACD,OAAOD,MAAM;AACf,CAAC,EACAO,KAAK,IAAG;EACL,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAEA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}